# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  posttr(relativePath: String): Posttr!
  posttrConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PosttrFilter): PosttrConnection!
}

input DocumentFilter {
  posttr: PosttrFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Posttr

type Posttr implements Node & Document {
  title: String!
  date: String
  image: String
  description: String
  url: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PosttrFilter {
  title: StringFilter
  date: DatetimeFilter
  image: ImageFilter
  description: StringFilter
  url: StringFilter
  body: RichTextFilter
}

type PosttrConnectionEdges {
  cursor: String!
  node: Posttr
}

type PosttrConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PosttrConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePosttr(relativePath: String!, params: PosttrMutation!): Posttr!
  createPosttr(relativePath: String!, params: PosttrMutation!): Posttr!
}

input DocumentUpdateMutation {
  posttr: PosttrMutation
  relativePath: String
}

input DocumentMutation {
  posttr: PosttrMutation
}

input PosttrMutation {
  title: String
  date: String
  image: String
  description: String
  url: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
